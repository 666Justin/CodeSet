#include<cstdio>
#include<cstring>
#include<random>
#include<ctime>
#define inf 0x7fffffff
struct skiplist{
    const int height=50;
    struct Node{
        int val,hei;
        struct Next{
            Node *next;
            int num;
            Next():next(NULL),num(1){}
        };
        Next *nxt;
        Node(int len):val(0),hei(len),nxt(new Next[len]){}
    };
    Node *head,*tail;
    int level_rand(){
        int ret=1;
        while(ret<height&&rand()&1) ret++;
        return ret;
    }
    skiplist():tail(new Node(height+1)),head(new Node(height+1)){
        tail->val=inf;
        head->val=-inf;
        for(int i=0;i<height;i++) head->nxt[i].next=tail;
    }
    void insert(int val){
        Node *update[height],*p=head;
        int cnt[height+1];memset(cnt,0,sizeof(cnt));
        for(int i=height-1;i>=0;i--){
            while(p->nxt[i].next->val<val) cnt[i+1]+=p->nxt[i].num,p=p->nxt[i].next;
            update[i]=p;
        }
        int level=level_rand();
        Node *cur=new Node(level);cur->val=val;
        for(int i=0;i<level;i++){
            cur->nxt[i].next=update[i]->nxt[i].next;
            cur->nxt[i].num=update[i]->nxt[i].num-cnt[i];
            update[i]->nxt[i].next=cur;
            update[i]->nxt[i].num=cnt[i]+1;
            cnt[i+1]+=cnt[i];
        }
        for(int i=level;i<height;i++) update[i]->nxt[i].num++;
    }
    void erase(int val){
        Node *update[height],*p=head;
        for(int i=height-1;i>=0;i--){
            while(p->nxt[i].next->val<val) p=p->nxt[i].next;
            update[i]=p;
        }
        p=p->nxt[0].next;
        for(int i=0;i<p->hei;i++){
            update[i]->nxt[i].next=p->nxt[i].next;
            update[i]->nxt[i].num+=p->nxt[i].num;
            update[i]->nxt[i].num--;
        }
        for(int i=p->hei;i<height;i++) update[i]->nxt[i].num--;
        delete p;
    }
    int getkth(int val){
        int kth=1;
        Node *p=head;
        for(int i=height-1;i>=0;i--)
            while(p->nxt[i].next->val<val) kth+=p->nxt[i].num,p=p->nxt[i].next;
        return kth;
    }
    int getval(int kth){
        Node *p=head;
        for(int i=height-1;i>=0;i--)
            while(p->nxt[i].num<=kth) kth-=p->nxt[i].num,p=p->nxt[i].next;
        return p->val;
    }
    int getpre(int val){
        Node *p=head;
        for(int i=height-1;i>=0;i--)
            while(p->nxt[i].next->val<val) p=p->nxt[i].next;
        return p->val;
    }
    int getnext(int val){
        Node *p=head;
        for(int i=height-1;i>=0;i--)
            while(p->nxt[i].next->val<=val) p=p->nxt[i].next;
        return p->nxt[0].next->val;
    }
}SL;
int n;
int main(){
    srand(283);
    scanf("%d",&n);
    for(int i=1;i<=n;i++){
        int opt,x;
        scanf("%d%d",&opt,&x);
        if(opt==1) SL.insert(x);
        if(opt==2) SL.erase(x);
        if(opt==3) printf("%d\n",SL.getkth(x));
        if(opt==4) printf("%d\n",SL.getval(x));
        if(opt==5) printf("%d\n",SL.getpre(x));
        if(opt==6) printf("%d\n",SL.getnext(x));
    }
    return 0;
}
